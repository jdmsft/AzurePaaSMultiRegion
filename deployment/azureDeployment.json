{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "solutionName": {
      "type": "String",
      "metadata": {
        "description": "The name of the solution."
      }
    },
      "regionPrimary": {
        "type": "string",
        "allowedValues": [
          "East Asia",
          "Southeast Asia",
          "Central US",
          "East US",
          "East US 2",
          "West US",
          "North Central US",
          "South Central US",
          "North Europe",
          "West Europe",
          "Japan West",
          "Japan East",
          "Brazil South",
          "Australia East",
          "Australia Southeast",
          "South India",
          "Central India",
          "West India",
          "Canada Central",
          "Canada East",
          "UK South",
          "UK West",
          "West Central US",
          "West US 2",
          "Korea Central",
          "Korea South",
          "France Central",
          "Australia Central",
          "Australia Central 2",
          "UAE Central",
          "UAE North",
          "South Africa North",
          "South Africa West",
          "Switzerland North",
          "Switzerland West",
          "Germany North",
          "Germany West Central",
          "Norway West",
          "Norway East"
        ],
        "metadata": {
          "description": "Primary Region Location"
        }
      },
    "regionSecondary": {
      "type": "string",
      "allowedValues": [
        "East Asia",
        "Southeast Asia",
        "Central US",
        "East US",
        "East US 2",
        "West US",
        "North Central US",
        "South Central US",
        "North Europe",
        "West Europe",
        "Japan West",
        "Japan East",
        "Brazil South",
        "Australia East",
        "Australia Southeast",
        "South India",
        "Central India",
        "West India",
        "Canada Central",
        "Canada East",
        "UK South",
        "UK West",
        "West Central US",
        "West US 2",
        "Korea Central",
        "Korea South",
        "France Central",
        "Australia Central",
        "Australia Central 2",
        "UAE Central",
        "UAE North",
        "South Africa North",
        "South Africa West",
        "Switzerland North",
        "Switzerland West",
        "Germany North",
        "Germany West Central",
        "Norway West",
        "Norway East"
      ],
      "metadata": {
        "description": "Secondary Region Location"
      }
    },
    "sqlServerAdminLogin": {
      "type": "String",
      "metadata": {
        "description": "The administrator login of the SQL Server."
      }
    },
    "sqlServerAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The administrator password of the SQL Server."
      }
    }
  },
  "variables": {
    // Web App
    "webAppProject": "WebApiDrDemoCS",
    "webAppLocations": [
      "[parameters('regionPrimary')]",
      "[parameters('regionSecondary')]"
    ],
    "webAppStage": [
      "primary",
      "secondary"
    ],
    // SQL Database
    "sqlServerPrimaryName": "[toLower(concat(parameters('solutionName'), '-sqlsrv-primary'))]",
    "sqlServerSecondaryName": "[toLower(concat(parameters('solutionName'), '-sqlsrv-secondary'))]",
    "sqlFailoverGroupName": "[parameters('solutionName')]",
    "sqlDatabaseName": "[parameters('solutionName')]",
    "sqlDatabaseServiceObjective": "Basic",
    "sqlDatabaseEdition": "Basic",
    "singleQout": " ' ",
    // EventHub
    "eventHubName": "[toLower(concat(parameters('solutionName'),'-eventhub'))]",
    "eventHubNamespaceName": "[toLower(concat(parameters('solutionName'),'-eventhub-namespace'))]",
    "eventhubAuthorizationRuleName": "RootManageSharedAccessKey",
    //Traffic Manager
    "trafficManagerName": "[parameters('solutionName')]",
    "diagnosticLogName": "DiagLogToEventHub",
    // Stream Analytics
    "streamName": "[toLower(concat(parameters('solutionName'),'-stream'))]",
    // GitHub
    "sourceCodeRepositoryURL": "https://github.com/jdmsft/AzurePaaSMultiRegion.git",
    "sourceCodeBranch": "master"
  },
  "resources": [
    //App Service Plan
    {
      "apiVersion": "2015-08-01",
      "name": "[concat(parameters('solutionName'), '-asp-', variables('webAppStage')[copyIndex()])]",
      "type": "Microsoft.Web/serverfarms",
      "copy": {
        "name": "farmloop",
        "count": "[length(variables('webAppLocations'))]"
      },
      "location": "[variables('webAppLocations')[copyIndex()]]",
      "sku": {
        "name": "S1",
        "tier": "Standard"
      }
    },
    // App Service (WebApp)
    {
      "apiVersion": "2015-08-01",
      "name": "[concat(parameters('solutionName'), variables('webAppStage')[copyIndex()])]",
      "type": "Microsoft.Web/sites",
      "copy": {
        "name": "siteloop",
        "count": "[length(variables('webAppLocations'))]"
      },
      "location": "[variables('webAppLocations')[copyIndex()]]",
      "dependsOn": [
        "[concat(parameters('solutionName'), '-asp-', variables('webAppStage')[copyIndex()])]"
      ],
      "properties": {
        "serverFarmId": "[concat(parameters('solutionName'), '-asp-', variables('webAppStage')[copyIndex()])]"
      },
      "resources": [
        {
          "type": "config",
          "name": "appsettings",
          "apiVersion": "2015-08-01",
          "comments": "These are the default appsettings configured on the both web apps.",
          "dependsOn": [
            "[resourceId('Microsoft.Web/serverfarms', concat(parameters('solutionName'), '-asp-', variables('webAppStage')[copyIndex()]))]",
            "[resourceId('Microsoft.Web/Sites', concat(parameters('solutionName'), variables('webAppStage')[copyIndex()]))]"
          ],
          "properties": {
            "Project": "[concat('source/', variables('webAppProject'))]"
          }
        },
        {
          "type": "sourcecontrols",
          "name": "web",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', concat(parameters('solutionName'), variables('webAppStage')[copyIndex()]))]",
            "[concat('Microsoft.Web/sites/', concat(parameters('solutionName'), variables('webAppStage')[copyIndex()]), '/config/appsettings')]"
          ],
          "properties": {
            "RepoUrl": "[variables('sourceCodeRepositoryURL')]",
            "branch": "[variables('sourceCodeBranch')]",
            "IsManualIntegration": true
          }
        },
        {
          "apiVersion": "2018-02-01",
          "type": "config",
          "name": "connectionstrings",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', concat(parameters('solutionName'), variables('webAppStage')[copyIndex()]))]",
            "[concat('Microsoft.Web/sites/', concat(parameters('solutionName'), variables('webAppStage')[copyIndex()]), '/config/appsettings')]"
          ],
          "properties": {
            "DefaultConnection": {
              "value": "[concat('metadata=res://*/ProductDB.csdl|res://*/ProductDB.ssdl|res://*/ProductDB.msl;provider=System.Data.SqlClient;provider connection string=', variables('singleQout') ,'Data Source=tcp:', variables('sqlFailoverGroupName'), '.database.windows.net', ',1433;Initial Catalog=', variables('sqlDatabaseName'), ';User Id=', parameters('sqlServerAdminLogin'), '@', variables('sqlFailoverGroupName'), '.database.windows.net', ';Password=', parameters('sqlServerAdminPassword'), ';MultipleActiveResultSets=True;App=EntityFramework', variables('singleQout'))]",
              "type": "Custom"
            }
          }
        }
      ]
    },
    // Traffic Manager
    {
      "apiVersion": "2018-04-01",
      "type": "Microsoft.Network/trafficManagerProfiles",
      "name": "[variables('trafficManagerName')]",
      "location": "global",
      "dependsOn": [
        "[concat('Microsoft.Web/sites/', parameters('solutionName'), variables('webAppStage')[0])]",
        "[concat('Microsoft.Web/sites/', parameters('solutionName'), variables('webAppStage')[1])]"
      ],
      "properties": {
        "profileStatus": "Enabled",
        "trafficRoutingMethod": "Priority",
        "dnsConfig": {
          "relativeName": "[variables('trafficManagerName')]",
          "ttl": 30
        },
        "monitorConfig": {
          "protocol": "HTTP",
          "port": 80,
          "path": "/",
          "intervalInSeconds": 10,
          "timeoutInSeconds": 5,
          "toleratedNumberOfFailures": 3
        }
      }
    },
    {
      "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
      "apiVersion": "2018-04-01",
      "name": "[concat(variables('trafficManagerName'), '/Endpoint', variables('webAppStage')[1])]",
      "location": "global",
      "dependsOn": [
        "[concat('Microsoft.Network/trafficManagerProfiles/', variables('trafficManagerName'))]",
        "[concat('Microsoft.Web/sites/', parameters('solutionName'), variables('webAppStage')[1])]"
      ],
      "properties": {
        "targetResourceId": "[resourceId('Microsoft.Web/sites/', concat(parameters('solutionName'), variables('webAppStage')[1]))]",
        "endpointStatus": "Enabled",
        "priority": 1
      }
    },
    {
      "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
      "apiVersion": "2018-04-01",
      "name": "[concat(variables('trafficManagerName'), '/Endpoint', variables('webAppStage')[0])]",
      "location": "global",
      "dependsOn": [
        "[concat('Microsoft.Network/trafficManagerProfiles/', variables('trafficManagerName'))]",
        "[concat('Microsoft.Web/sites/', parameters('solutionName'), variables('webAppStage')[0])]"
      ],
      "properties": {
        "targetResourceId": "[resourceId('Microsoft.Web/sites/', concat(parameters('solutionName'), variables('webAppStage')[0]))]",
        "endpointStatus": "Enabled",
        "priority": 2
      }
    },/*
    {
      "type": "Microsoft.Network/trafficManagerProfiles/providers/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "name": "[concat(variables('trafficManagerName'),'/microsoft.insights/', variables('diagnosticLogName'))]",
      "location": "[variables('webAppLocations')[0]]",
      "dependsOn": [
        "[concat('Microsoft.Network/trafficManagerProfiles/', variables('trafficManagerName'))]",
        "[concat('Microsoft.EventHub/namespaces/', variables('eventHubNamespaceName'))]"
      ],
      "properties": {
        "name": "[variables('diagnosticLogName')]",
        "eventHubAuthorizationRuleId": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', variables('eventHubNamespaceName'), variables('eventhubAuthorizationRuleName'))]",
        "eventHubName": "[variables('eventHubName')]",
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": false,
            "retentionPolicy": {
              "days": 0,
              "enabled": false
            },
            "timeGrain": null
          }
        ],
        "logs": [
          {
            "category": "ProbeHealthStatusEvents",
            "enabled": true
          }
        ]
      }
    },
    */
    // SQL Database
    {
      "type": "Microsoft.Sql/servers",
      "kind": "v12.0",
      "name": "[variables('sqlServerPrimaryName')]",
      "apiVersion": "2019-06-01-preview",
      "location": "[variables('webAppLocations')[1]]",
      "properties": {
        "administratorLogin": "[parameters('sqlServerAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlServerAdminPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "type": "firewallrules",
          "apiVersion": "2015-05-01-preview",
          "name": "AllowAllAzureIps",
          "location": "[variables('webAppLocations')[1]]",
          "dependsOn": [
            "[variables('sqlServerPrimaryName')]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "name": "[variables('sqlDatabaseName')]",
          "type": "databases",
          "apiVersion": "2019-06-01-preview",
          "location": "[variables('webAppLocations')[1]]",
          "dependsOn": [
            "[variables('sqlServerPrimaryName')]"
          ],
          "properties": {
            "edition": "[variables('sqlDatabaseEdition')]",
            "requestedServiceObjectiveName": "[variables('sqlDatabaseServiceObjective')]"
          }
        },
        {
          "apiVersion": "2019-06-01-preview",
          "type": "failoverGroups",
          "name": "[variables('sqlFailoverGroupName')]",
          "dependsOn": [
            "[variables('sqlServerPrimaryName')]",
            "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerPrimaryName'), variables('sqlDatabaseName'))]",
            "[resourceId('Microsoft.Sql/servers', variables('sqlServerSecondaryName'))]"
          ],
          "properties": {
            "serverName": "[variables('sqlServerPrimaryName')]",
            "partnerServers": [
              {
                "id": "[resourceId('Microsoft.Sql/servers', variables('sqlServerSecondaryName'))]"
              }
            ],
            "readWriteEndpoint": {
              "failoverPolicy": "Manual"
            },
            "readOnlyEndpoint": {
              "failoverPolicy": "Disabled"
            },
            "databases": [
              "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerPrimaryName'), variables('sqlDatabaseName'))]"
            ]
          }
        }
      ]
    },
    {
      "type": "Microsoft.Sql/servers",
      "kind": "v12.0",
      "name": "[variables('sqlServerSecondaryName')]",
      "apiVersion": "2019-06-01-preview",
      "location": "[variables('webAppLocations')[0]]",
      "properties": {
        "administratorLogin": "[parameters('sqlServerAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlServerAdminPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "type": "firewallrules",
          "apiVersion": "2015-05-01-preview",
          "name": "AllowAllAzureIps",
          "location": "[variables('webAppLocations')[0]]",
          "dependsOn": [
            "[variables('sqlServerSecondaryName')]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        }
      ]
    } /*,
    // EventHub
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2018-01-01-preview",
      "name": "[variables('eventHubNamespaceName')]",
      "location": "[variables('webAppLocations')[0]]",
      "sku": {
        "name": "Basic",
        "tier": "Basic",
        "capacity": 1
      },
      "properties": {
        "zoneRedundant": false,
        "isAutoInflateEnabled": false,
        "maximumThroughputUnits": 0,
        "kafkaEnabled": false
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('eventHubNamespaceName'), '/RootManageSharedAccessKey')]",
      "location": "[variables('webAppLocations')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ],
      "properties": {
        "rights": [
          "Listen",
          "Manage",
          "Send"
        ]
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubName'))]",
      "location": "[variables('webAppLocations')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ],
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 2,
        "status": "Active"
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubName'), '/PreviewDataPolicy')]",
      "location": "[variables('webAppLocations')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName'))]",
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ],
      "properties": {
        "rights": [
          "Listen"
        ]
      }
    },
    // Stream
    {
      "type": "Microsoft.StreamAnalytics/streamingjobs",
      "apiVersion": "2016-03-01",
      "name": "[variables('streamName')]",
      "location": "[variables('webAppLocations')[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName'))]",
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ],
      "properties": {
        "sku": {
          "name": "Standard"
        },
        "outputStartMode": "JobStartTime",
        "eventsOutOfOrderPolicy": "Adjust",
        "outputErrorPolicy": "Stop",
        "eventsOutOfOrderMaxDelayInSeconds": 0,
        "eventsLateArrivalMaxDelayInSeconds": 5,
        "dataLocale": "en-US",
        "compatibilityLevel": "1.1",
        "inputs": [
          {
            "name": "soinputfostream",
            "properties": {
              "type": "Stream",
              "datasource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "eventHubName": "[variables('eventHubName')]",
                  "serviceBusNamespace": "[variables('eventHubNamespaceName')]",
                  "sharedAccessPolicyName": "PreviewDataPolicy",
                  "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaceName'), variables('eventHubName'), 'PreviewDataPolicy'),'2017-04-01').primaryKey]"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          }
        ],
        "transformation": {
          "name": "query",
          "properties": {
            "streamingUnits": 3,
            "query": "SELECT rec.ArrayValue.Time FROM [soinputfostream] i CROSS APPLY GetArrayElements(i.records) as rec WHERE  rec.ArrayValue.properties.Status = 'Down'"
          }
        },
        "outputs": [
        ]
      }
    }*/
  ]
}
